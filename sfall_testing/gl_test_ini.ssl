#include "lib.arrays.h" // For arrays_equal, len_array, etc.
#include "test_utils.h"   // For assertEquals, VALTYPE_STR, report_test_results

// To test: copy test.ini into the game folder
procedure ini_test_suite begin
    variable result_array, expected_array, key_type, value_type, count, key_val_pair;

    display_msg("--- Testing get_ini_section ---");

    // Test Case 1: Valid file, valid section
    display_msg("Test Case 1: Valid file, valid section ('ValidSection')");
    result_array := get_ini_section("test.ini", "ValidSection");
    expected_array := {"Key1": "Value1", "Key2": "2"};
    call assertEquals("TC1 Size", len_array(result_array), 2);
    call assertEquals("TC1 Content", arrays_equal(result_array, expected_array), true);
    count := 0;
    foreach key_val_pair in result_array begin
        count += 1;
        call assertEquals("TC1 Key Type " + count, typeof(key_val_pair[0]), VALTYPE_STR);
        call assertEquals("TC1 Value Type " + count, typeof(key_val_pair[1]), VALTYPE_STR);
    end
    call assertEquals("TC1 Specific Key1 Value", result_array["Key1"], "Value1");
    call assertEquals("TC1 get_ini_setting string", get_ini_setting("test.ini|ValidSection|Key1"), 0);
    call assertEquals("TC1 get_ini_string string", get_ini_string("test.ini|ValidSection|Key1"), "Value1");
    call assertEquals("TC1 get_ini_setting int", get_ini_setting("test.ini|ValidSection|Key2"), 2);
    call assertEquals("TC1 get_ini_string int", get_ini_setting("test.ini|ValidSection|Key2"), 2); // TODO: "2"?

    // Test Case 3: INI file not found
    display_msg("Test Case 3: INI file not found ('nonexistent.ini')");
    result_array := get_ini_section("nonexistent.ini", "AnySection");
    expected_array := {}; // Empty associative array
    call assertEquals("TC3 Size", len_array(result_array), 0);
    call assertEquals("TC3 Content", arrays_equal(result_array, expected_array), true);
    call assertEquals("TC3 Is Map", array_key(result_array, -1), 1); // Should still be an associative array

    // Test Case 4: Valid file, section not found
    display_msg("Test Case 4: Valid file, section not found ('NonExistentSection')");
    result_array := get_ini_section("test.ini", "NonExistentSection");
    // expected_array is still {}
    call assertEquals("TC4 Size", len_array(result_array), 0);
    call assertEquals("TC4 Content", arrays_equal(result_array, expected_array), true);
    call assertEquals("TC4 Is Map", array_key(result_array, -1), 1);

    // Test Case 5: Valid file, empty section
    display_msg("Test Case 5: Valid file, empty section ('EmptySection')");
    result_array := get_ini_section("test.ini", "EmptySection");
    // expected_array is still {}
    call assertEquals("TC5 Size", len_array(result_array), 0);
    call assertEquals("TC5 Content", arrays_equal(result_array, expected_array), true);
    call assertEquals("TC5 Is Map", array_key(result_array, -1), 1);

    display_msg("--- get_ini_section tests finished ---");
    call report_test_results("get_ini_section");
end

procedure start begin
    display_msg("Starting INI function tests");
    call ini_test_suite();
end
